// Generated by CoffeeScript 1.6.3
var $G, G, Pane, code, fb_project, fb_root, hash;

code = {};

$G = $(G = window);

Pane = (function() {
  function Pane(o) {
    var $iframe, $pad, $pane, editor, fb_fp, firepad, resize, session;
    $pane = $('<div class="pane">');
    $pane.appendTo('body');
    (resize = function() {
      return $pane.css({
        width: innerWidth,
        height: innerHeight / 2
      });
    })();
    $G.on("resize", resize);
    if (o.preview) {
      $iframe = $('<iframe sandbox="allow-same-origin allow-scripts allow-forms">');
      $iframe.appendTo($pane);
      $G.on("code-change", function() {
        var body, data_uri, e, error_handling, head, html, iframe, js;
        $pane.loading();
        head = body = "";
        error_handling = function() {
          var d;
          d = document.createElement("div");
          d.className = "error script-error";
          return window.onerror = function(error) {
            document.body.appendChild(d);
            d.style.position = "absolute";
            d.style.borderRadius = d.style.padding = d.style.bottom = d.style.right = "5px";
            return d.innerText = d.textContent = error;
          };
        };
        body += "<script>~" + error_handling + "()</script>\n<style>\n	.error {\n		background: rgba(255, 0, 0, 0.8);\n		color: white;\n	}\n	body {\n		font-family: Helvetica, sans-serif;\n	}\n</style>";
        if (code.html) {
          body += code.html;
        }
        if (code.css) {
          head += "<style>" + code.css + "</style>";
        }
        if (code.javascript) {
          body += "<script>" + code.javascript + "</script>";
        }
        if (code.coffee) {
          try {
            js = CoffeeScript.compile(code.coffee);
            body += "<script>" + js + "</script>";
          } catch (_error) {
            e = _error;
            body += "<h1 class='error'>CoffeeScript Compilation Error</h1>" + e.message;
          }
        }
        html = "<!doctype html>\n<html>\n	<head>\n		<meta charset=\"utf-8\">\n		" + head + "\n	</head>\n	<body style='background:black;color:white;'>\n		" + body + "\n	</body>\n</html>";
        data_uri = "data:text/html," + encodeURI(html);
        $iframe.one("load", function() {
          return $pane.loading("done");
        });
        iframe = $iframe[0];
        if (iframe.contentWindow) {
          return iframe.contentWindow.location.replace(data_uri);
        } else {
          return $iframe.attr({
            src: data_uri
          });
        }
      });
    } else {
      $pad = $('<div>');
      $pad.appendTo($pane);
      $pane.loading();
      fb_fp = fb_project.child(o.lang);
      editor = this.editor = ace.edit($pad.get(0));
      editor.on('input', function() {
        code[o.lang] = editor.getValue();
        return $G.triggerHandler("code-change");
      });
      session = editor.getSession();
      session.setUseWrapMode(true);
      session.setUseWorker(false);
      session.setMode("ace/mode/" + o.lang);
      firepad = Firepad.fromACE(fb_fp, editor);
      firepad.on('ready', function() {
        var _ref;
        $pane.loading("done");
        if (firepad.isHistoryEmpty()) {
          return firepad.setText((_ref = {
            javascript: '// JavaScript\n\ndocument.write("Hello World!");\n',
            coffee: '# CoffeeScript\n\ndocument.write "Hello World!"\n',
            css: 'body {\n	font-family: Helvetica, sans-serif;\n}'
          }[o.lang]) != null ? _ref : "");
        }
      });
    }
  }

  Pane.prototype.set_theme = function(theme) {
    if (this.editor) {
      return this.editor.setTheme(theme.theme);
    }
  };

  return Pane;

})();

fb_root = new Firebase("https://multifiddle.firebaseio.com/");

fb_project = null;

hash = G.location.hash.replace('#', '');

if (hash) {
  fb_project = fb_root.child(hash);
} else {
  fb_project = fb_root.push();
  G.location = G.location + '#' + fb_project.name();
}

$(function() {
  var panes, set_theme, themes, themesByName, _ref;
  panes = [
    new Pane({
      lang: "coffee"
    }), new Pane({
      preview: true
    })
  ];
  _ref = ace.require("ace/ext/themelist"), themes = _ref.themes, themesByName = _ref.themesByName;
  set_theme = function(theme_name) {
    var pane, theme, _i, _len, _results;
    theme = themesByName[theme_name];
    if (theme.isDark) {
      $("body").addClass("dark");
    } else {
      $("body").removeClass("dark");
    }
    _results = [];
    for (_i = 0, _len = panes.length; _i < _len; _i++) {
      pane = panes[_i];
      _results.push(pane.set_theme(theme));
    }
    return _results;
  };
  set_theme("tomorrow_night_bright");
  return console.log(themes);
});
