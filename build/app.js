// Generated by CoffeeScript 1.9.3
(function() {
  var $G, E, G, fb_project, fb_root, hash, project_id, ref, ref1, themes, themesByName, what_to_show;

  ref = ace.require("ace/ext/themelist"), themes = ref.themes, themesByName = ref.themesByName;

  $G = $(G = window);

  E = function(tagname) {
    return document.createElement(tagname);
  };

  this.Project = (function() {
    function Project(fb, what_to_show) {
      this.fb = fb;
      this.languages = ["coffee", "css", "html"];
      this.$codes = $(this.codes = {});
      this.show(what_to_show);
      $G.on("resize", this._onresize = (function(_this) {
        return function() {
          return _this.main_pane.layout();
        };
      })(this));
    }

    Project.prototype.applyTheme = function(theme_name) {
      var edpane, i, len, ref1, results, theme;
      theme = themesByName[theme_name];
      if (theme.isDark) {
        $("body").addClass("dark");
      } else {
        $("body").removeClass("dark");
      }
      ref1 = EditorPane.instances;
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        edpane = ref1[i];
        results.push(edpane.editor.setTheme(theme.theme));
      }
      return results;
    };

    Project.prototype.exit = function() {
      $G.off("resize", this._onresize);
      this.main_pane.destroy();
      return this.main_pane.$.remove();
    };

    Project.prototype.show = function(what_to_show) {
      var bottom_pane, ref1, ref2, ref3, top_pane;
      what_to_show || (what_to_show = "all");
      if ((ref1 = this.main_pane) != null) {
        ref1.destroy();
      }
      if ((ref2 = this.main_pane) != null) {
        if ((ref3 = ref2.$) != null) {
          ref3.remove();
        }
      }
      switch (what_to_show) {
        case "output":
          this.main_pane = new PanesPane({
            orientation: "y"
          });
          this.main_pane.add(new PreviewPane({
            project: this
          }));
          break;
        case "all":
          this.main_pane = new PanesPane({
            orientation: "y"
          });
          this.main_pane.add(top_pane = new PanesPane({
            orientation: "x"
          }));
          this.main_pane.add(bottom_pane = new PanesPane({
            orientation: "x"
          }));
          top_pane.add(new EditorPane({
            project: this,
            lang: this.languages[0]
          }));
          top_pane.add(new EditorPane({
            project: this,
            lang: this.languages[1]
          }));
          bottom_pane.add(new EditorPane({
            project: this,
            lang: this.languages[2]
          }));
          bottom_pane.add(new PreviewPane({
            project: this
          }));
          break;
        default:
          alert("Unknown thing to show, url includes #.../???");
      }
      this.main_pane.$.appendTo("body");
      this.main_pane.layout();
      return this.applyTheme("tomorrow_night_bright");
    };

    return Project;

  })();

  fb_root = new Firebase("https://multifiddle.firebaseio.com/");

  hash = G.location.hash.replace('#', '');

  ref1 = hash.split("/"), project_id = ref1[0], what_to_show = ref1[1];

  if (hash) {
    fb_project = fb_root.child(project_id);
  } else {
    fb_project = fb_root.push();
    G.location = G.location + '#' + fb_project.name();
  }

  $(function() {
    var project;
    project = new Project(fb_project, what_to_show);
    return $G.on("hashchange", function() {
      var new_hash, new_project_id, new_to_show, ref2;
      new_hash = G.location.hash.replace('#', '');
      ref2 = new_hash.split("/"), new_project_id = ref2[0], new_to_show = ref2[1];
      if (typeof console !== "undefined" && console !== null) {
        if (typeof console.debug === "function") {
          console.debug("location hash changed from", hash, "to", new_hash);
        }
      }
      if (new_project_id !== project_id) {
        project_id = new_project_id;
        if (typeof console !== "undefined" && console !== null) {
          if (typeof console.debug === "function") {
            console.debug("switch project to " + new_project_id);
          }
        }
        project.exit();
        fb_project = fb_root.child(project_id);
        project = new Project(fb_project, new_to_show);
      }
      if (new_to_show !== what_to_show) {
        what_to_show = new_to_show;
        if (typeof console !== "undefined" && console !== null) {
          if (typeof console.debug === "function") {
            console.debug("show " + (new_to_show || "all panes"));
          }
        }
        return project.show(new_to_show);
      }
    });
  });

}).call(this);
