// Generated by CoffeeScript 1.9.3
(function() {
  var $G, E, G, fb_project, fb_root, hash, project_id, ref, ref1, themes, themesByName, what_to_show;

  ref = ace.require("ace/ext/themelist"), themes = ref.themes, themesByName = ref.themesByName;

  $G = $(G = window);

  E = function(tagname) {
    return document.createElement(tagname);
  };

  this.Project = (function() {
    function Project(fb, what_to_show) {
      var bottom_pane, top_pane;
      this.fb = fb;
      this.languages = ["coffee", "css", "html"];
      this.$codes = $(this.codes = {});
      this.root_pane = new PanesPane({
        orientation: "y"
      });
      this.root_pane.add(top_pane = new PanesPane({
        orientation: "x"
      }));
      this.root_pane.add(bottom_pane = new PanesPane({
        orientation: "x"
      }));
      top_pane.add(new EditorPane({
        project: this,
        lang: this.languages[0]
      }));
      top_pane.add(new EditorPane({
        project: this,
        lang: this.languages[1]
      }));
      bottom_pane.add(new EditorPane({
        project: this,
        lang: this.languages[2]
      }));
      bottom_pane.add(this.output_pane = new OutputPane({
        project: this
      }));
      this.root_pane.$.appendTo("body");
      this.root_pane.layout();
      this.applyTheme("tomorrow_night_bright");
      this.show(what_to_show);
      $G.on("resize", this._onresize = (function(_this) {
        return function() {
          return _this.root_pane.layout();
        };
      })(this));
    }

    Project.prototype.applyTheme = function(theme_name) {
      var edpane, i, len, ref1, results, theme;
      theme = themesByName[theme_name];
      if (theme.isDark) {
        $("body").addClass("dark");
      } else {
        $("body").removeClass("dark");
      }
      ref1 = EditorPane.instances;
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        edpane = ref1[i];
        results.push(edpane.editor.setTheme(theme.theme));
      }
      return results;
    };

    Project.prototype.exit = function() {
      $G.off("resize", this._onresize);
      this.root_pane.destroy();
      return this.root_pane.$.remove();
    };

    Project.prototype.show = function(what_to_show) {
      switch (what_to_show) {
        case "output":
          return $("body").addClass("show-output-only");
        default:
          return $("body").removeClass("show-output-only");
      }
    };

    return Project;

  })();

  fb_root = new Firebase("https://multifiddle.firebaseio.com/");

  hash = G.location.hash.replace('#', '');

  ref1 = hash.split("/"), project_id = ref1[0], what_to_show = ref1[1];

  if (hash) {
    fb_project = fb_root.child(project_id);
  } else {
    fb_project = fb_root.push();
    G.location = G.location + '#' + fb_project.name();
  }

  $(function() {
    var project;
    project = new Project(fb_project, what_to_show);
    $G.on("hashchange", function() {
      var new_hash, new_project_id, new_to_show, ref2;
      new_hash = G.location.hash.replace('#', '');
      ref2 = new_hash.split("/"), new_project_id = ref2[0], new_to_show = ref2[1];
      if (typeof console !== "undefined" && console !== null) {
        if (typeof console.debug === "function") {
          console.debug("location hash changed from", hash, "to", new_hash);
        }
      }
      if (new_project_id !== project_id) {
        project_id = new_project_id;
        if (typeof console !== "undefined" && console !== null) {
          if (typeof console.debug === "function") {
            console.debug("switch project to " + new_project_id);
          }
        }
        project.exit();
        fb_project = fb_root.child(project_id);
        project = new Project(fb_project, new_to_show);
      }
      if (new_to_show !== what_to_show) {
        what_to_show = new_to_show;
        if (typeof console !== "undefined" && console !== null) {
          if (typeof console.debug === "function") {
            console.debug("show " + (new_to_show || "all panes"));
          }
        }
        return project.show(new_to_show);
      }
    });
    return $G.on("keydown", function(e) {
      var canvas, cell_size, col, ctrl_m, ctx, escape, h, i, j, n_cells, output_only_url, qrcode, ref2, ref3, row, size, w;
      ctrl_m = e.ctrlKey && e.keyCode === 77;
      escape = e.keyCode === 27;
      if (escape || ctrl_m) {
        if ($(".qr-code-popup").length) {
          $(".qr-code-popup").remove();
          return e.preventDefault();
        }
      }
      if (ctrl_m) {
        e.preventDefault();
        output_only_url = location.origin.match(/127\.0\.0\.1|localhost|^file:/) ? "http://1j01.github.io/multifiddle/#" + project_id + "/output" : "" + location.origin + location.pathname + "#" + project_id + "/output";
        size = 256;
        qrcode = new QRCode(-1, QRErrorCorrectLevel.M);
        qrcode.addData(output_only_url);
        qrcode.make();
        canvas = document.createElement("canvas");
        canvas.width = size;
        canvas.height = size;
        ctx = canvas.getContext("2d");
        n_cells = qrcode.getModuleCount();
        cell_size = size / n_cells;
        for (row = i = 0, ref2 = n_cells; 0 <= ref2 ? i < ref2 : i > ref2; row = 0 <= ref2 ? ++i : --i) {
          for (col = j = 0, ref3 = n_cells; 0 <= ref3 ? j < ref3 : j > ref3; col = 0 <= ref3 ? ++j : --j) {
            ctx.fillStyle = qrcode.isDark(row, col) ? "#000" : "#fff";
            w = Math.ceil((col + 1) * cell_size) - Math.floor(col * cell_size);
            h = Math.ceil((row + 1) * cell_size) - Math.floor(row * cell_size);
            ctx.fillRect(Math.round(col * cell_size), Math.round(row * cell_size), w, h);
          }
        }
        return $(canvas).addClass("qr-code-popup").appendTo("body").css({
          position: "absolute",
          margin: "auto",
          top: 0,
          left: 0,
          bottom: 0,
          right: 0,
          zIndex: 10,
          boxShadow: "#0083F5 0 0 180px",
          border: "5px solid rgba(0, 131, 245, 0.6)"
        });
      }
    });
  });

}).call(this);
