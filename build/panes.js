// Generated by CoffeeScript 2.3.0
(function() {
  var $G, E, G, SourceMapConsumer;

  $G = $(G = window);

  E = function(tagname) {
    return document.createElement(tagname);
  };

  ({SourceMapConsumer} = sourceMap);

  this.Pane = class Pane {
    constructor() {
      this.$ = $(E('div'));
      this.$.addClass("pane");
      this.flex = 1;
    }

    layout() {}

    destroy() {}

  };

  this.PanesPane = (function() {
    var resizer_size;

    class PanesPane extends Pane {
      constructor(options) {
        super(options);
        this.$.addClass("panes-pane");
        this.orientation = options.orientation || "y";
        this.children = [];
        this.$resizers = $();
      }

      orient(orientation) {
        this.orientation = orientation;
        return this.layout();
      }

      layout() {
        var _col_row, _d1, _d1_end, _d1_start, _d2, _d2_end, _d2_start, _mouse_d1, _mouse_d2, after, before, child_pane, child_pane_size, display, i, j, k, len, len1, n_children, n_resizers, o, parent_pane, ref, ref1, results, space_to_distribute_in_d1;
        parent_pane = this;
        o = this.orientation;
        
        // orientation
        display = {
          x: "inline-block",
          y: "block"
        }[o];
        _col_row = {
          x: "col",
          y: "row"
        }[o];
        
        // primary dimension which is divided between the children
        _d1 = {
          x: "width",
          y: "height"
        }[o];
        _d1_start = {
          x: "left",
          y: "top"
        }[o];
        _d1_end = {
          x: "right",
          y: "bottom"
        }[o];
        
        // secondary dimension which is the same for the parent and all children
        _d2 = {
          x: "height",
          y: "width"
        }[o];
        _d2_start = {
          x: "top",
          y: "left"
        }[o];
        _d2_end = {
          x: "bottom",
          y: "right"
        }[o];
        
        // properties of mouse events to get the mouse position
        _mouse_d1 = {
          x: "clientX",
          y: "clientY"
        }[o];
        _mouse_d2 = {
          x: "clientY",
          y: "clientX"
        }[o];
        n_children = parent_pane.children.length;
        n_resizers = Math.max(0, n_children - 1);
        space_to_distribute_in_d1 = parent_pane.$[_d1]() - resizer_size * n_resizers;
        ref = parent_pane.children;
        for (j = 0, len = ref.length; j < len; j++) {
          child_pane = ref[j];
          child_pane_size = child_pane.flex / n_children * space_to_distribute_in_d1;
          child_pane.$.css(_d1, child_pane_size);
          child_pane.$.css(_d2, parent_pane.$[_d2]());
          child_pane.$.css({display});
          child_pane.layout();
        }
        parent_pane.$resizers.remove();
        parent_pane.$resizers = $();
        ref1 = parent_pane.children;
        results = [];
        for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
          before = ref1[i];
          if (after = parent_pane.children[i + 1]) {
            results.push(((before, after) => {
              var $more_resizers, $resizer;
              $resizer = $(E("div")).addClass(`resizer ${_col_row}-resizer`);
              $resizer.insertAfter(before.$);
              $resizer.css(_d1, resizer_size);
              $resizer.css(_d2, parent_pane.$[_d2]());
              $resizer.css({display});
              $resizer.css({
                cursor: `${_col_row}-resize`
              });
              $more_resizers = $();
              $resizer.on("mouseover mousemove", (e) => {
                if (!$resizer.hasClass("drag")) {
                  $more_resizers = $();
                  $(".resizer").each(function(i, res_el) {
                    var rect, ref2;
                    if ($resizer[0] === res_el) {
                      return;
                    }
                    if (!$.contains(parent_pane.$[0], res_el)) {
                      return;
                    }
                    rect = res_el.getBoundingClientRect();
                    if ((rect[_d2_start] < (ref2 = e[_mouse_d2]) && ref2 < rect[_d2_end])) {
                      return $more_resizers = $more_resizers.add(res_el);
                    }
                  });
                  return $resizer.css({
                    cursor: ($more_resizers.length ? "move" : `${_col_row}-resize`)
                  });
                }
              });
              $resizer.on("mouseout", (e) => {
                if (!$resizer.hasClass("drag")) {
                  return $more_resizers = $();
                }
              });
              $resizer.on("mousedown", (e, synthetic) => {
                var mousemove;
                e.preventDefault();
                $resizer.addClass("drag");
                $more_resizers.addClass("drag");
                $("body").addClass("dragging");
                if (!synthetic) {
                  $("body").addClass(($more_resizers.length ? "multi" : _col_row) + "-resizing");
                }
                $more_resizers.trigger(e, "synthetic");
                mousemove = (e) => {
                  var after_end, b, before_start, l, len2, mouse_pos, pane, ref2, total_size;
                  before_start = before.$[0].getBoundingClientRect()[_d1_start];
                  after_end = after.$[0].getBoundingClientRect()[_d1_end];
                  b = resizer_size / 2 + 1;
                  mouse_pos = e[_mouse_d1];
                  mouse_pos = Math.max(before_start + b, Math.min(after_end - b, mouse_pos));
                  before.$.css(_d1, mouse_pos - before_start - resizer_size / 2);
                  after.$.css(_d1, after_end - mouse_pos - resizer_size / 2);
                  before.layout();
                  after.layout();
                  
                  // calculate flex values
                  total_size = (parent_pane.$[_d1]()) - (resizer_size * n_resizers);
                  ref2 = parent_pane.children;
                  for (l = 0, len2 = ref2.length; l < len2; l++) {
                    pane = ref2[l];
                    pane.flex = pane.$[_d1]() / total_size * n_children;
                  }
                  return this.$.trigger("resized");
                };
                $G.on("mousemove", mousemove);
                return $G.on("mouseup", function() {
                  $G.off("mousemove", mousemove);
                  $("body").removeClass("dragging col-resizing row-resizing multi-resizing");
                  $resizer.removeClass("drag");
                  return $more_resizers.removeClass("drag");
                });
              });
              return parent_pane.$resizers = parent_pane.$resizers.add($resizer);
            })(before, after));
          }
        }
        return results;
      }

      add(pane) {
        this.$.append(pane.$);
        return this.children.push(pane);
      }

      destroy() {
        var child_pane, j, len, ref, results;
        ref = this.children;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          child_pane = ref[j];
          results.push(typeof child_pane.destroy === "function" ? child_pane.destroy() : void 0);
        }
        return results;
      }

    };

    resizer_size = 8; // TODO: use CSS

    return PanesPane;

  }).call(this);

  this.LeafPane = (function() {
    class LeafPane extends Pane {
      constructor(options) {
        var $label, $pane, lang, project;
        super(options);
        LeafPane.instances.push(this);
        ({lang, project} = options);
        $pane = this.$;
        $pane.addClass("leaf-pane");
        $label = $(E('button')).addClass("label");
        $label.appendTo($pane);
        $label.text((function() {
          switch (lang) {
            case "coffee":
              return "CoffeeScript";
            case "js":
              return "JavaScript";
            case "css":
              return "CSS";
            case "html":
              return "HTML";
            case void 0:
              return "Output";
            default:
              return `${lang}`.toUpperCase();
          }
        })());
      }

    };

    LeafPane.instances = [];

    return LeafPane;

  }).call(this);

  this.OutputPane = class OutputPane extends LeafPane {
    constructor(options) {
      var $errors, $iframe, $pane, iframe, lines_before_coffee_script, project, scroll_x, scroll_y, show_error, source_map_consumer, v3SourceMap, wait_then;
      super(options);
      ({project} = options);
      this.disable_output_key = `prevent running ${project.fb.key()}`;
      this.disable_output = localStorage[this.disable_output_key] != null;
      this.loaded = false;
      this.destroyed = false;
      $pane = this.$;
      $pane.addClass("output-pane");
      this._codes_previous = {};
      this._coffee_body = "";
      $errors = $(E('div')).addClass("errors");
      $errors.appendTo($pane);
      $iframe = $(iframe = E('iframe')).attr({
        sandbox: "allow-scripts allow-forms",
        allowfullscreen: true
      });
      $iframe.appendTo($pane);
      show_error = function(text, line_number, line_column) {
        var $error, go_to_error, match;
        $error = $(E("div")).addClass("error");
        if (line_number && !text.match(/line (\d+)/)) {
          text = `On line ${line_number}: ${text}`;
        }
        if (match = text.match(/line (\d+)/)) {
          go_to_error = function() {
            var editor, editor_pane, j, len, ref;
            ref = EditorPane.instances;
            for (j = 0, len = ref.length; j < len; j++) {
              editor_pane = ref[j];
              if (editor_pane.lang === "coffee") {
                editor = editor_pane.editor;
              }
            }
            editor.focus();
            editor.scrollToLine(line_number, true, true, function() {});
            return editor.gotoLine(line_number, line_column, true);
          };
          $error.append(document.createTextNode(text.slice(0, match.index)), $(E("button")).text(match[0]).click(go_to_error), document.createTextNode(text.slice(match.index + match[0].length)));
        } else {
          $error.text(text);
        }
        return $error.appendTo($errors);
      };
      lines_before_coffee_script = null;
      v3SourceMap = null;
      source_map_consumer = null;
      scroll_x = null;
      scroll_y = null;
      window.addEventListener("message", function(e) {
        var column, error_message, line, message, source;
        message = (function() {
          try {
            return JSON.parse(e.data);
          } catch (error1) {}
        })();
        switch (message != null ? message.type : void 0) {
          case "error":
            ({error_message, source, line, column} = message);
            if (source === "fiddle-content") {
              if (v3SourceMap) {
                line -= lines_before_coffee_script;
                if (source_map_consumer == null) {
                  source_map_consumer = new SourceMapConsumer(v3SourceMap);
                }
                ({line, column} = source_map_consumer.originalPositionFor({line, column}));
                return show_error(error_message, line, column);
              } else {
                return show_error(error_message);
              }
            } else {
              return show_error(error_message);
            }
            break;
          case "scroll":
            scroll_x = message.x;
            return scroll_y = message.y;
          default:
            return console.error("Unhandled message:", e.data);
        }
      });
      wait_then = function(fn) {
        var tid;
        tid = -1;
        return function(...args) {
          clearTimeout(tid);
          return tid = setTimeout(function() {
            return fn(...args);
          }, 600);
        };
      };
      project.$codes.on("change", wait_then(() => {
        var $disabled_output, all_languages_are_there, before_coffee_script, body, codes, coffee_script_index, e, expected_lang, frame_code, head, html, j, js, len, ref, run;
        
        // Since we're waiting before responding to change events, we might get here after this pane is destroyed
        if (this.destroyed) {
          return;
        }
        ({codes} = project);
        all_languages_are_there = true;
        ref = project.languages;
        for (j = 0, len = ref.length; j < len; j++) {
          expected_lang = ref[j];
          if (codes[expected_lang] == null) {
            all_languages_are_there = false;
          }
        }
        if (!all_languages_are_there) {
          return;
        }
        $pane.loading();
        $errors.empty();
        source_map_consumer = null;
        head = body = "";
        frame_code = function(parent_origin, scroll_x, scroll_y) {
          window.addEventListener("DOMContentLoaded", function(e) {
            return window.scrollTo(scroll_x, scroll_y);
          });
          window.addEventListener("scroll", function(e) {
            var message;
            message = {
              type: "scroll",
              x: window.scrollX,
              y: window.scrollY
            };
            return parent.postMessage(JSON.stringify(message), parent_origin);
          });
          return window.onerror = function(error_message, source, line, column, error) {
            var message;
            message = {
              type: "error",
              error_message,
              source,
              line,
              column
            };
            return parent.postMessage(JSON.stringify(message), parent_origin);
          };
        };
        body += `<script>(${frame_code})(${JSON.stringify(location.origin)}, ${JSON.stringify(scroll_x)}, ${JSON.stringify(scroll_y)})</script>`;
        head += "<style>\n	body {\n		font-family: Helvetica, sans-serif;\n		background: black;\n		color: white;\n	}\n</style>";
        if (codes.html) {
          body += codes.html;
        }
        if (codes.css) {
          head += `<style>${codes.css}</style>`;
        }
        if (codes.javascript) {
          body += `<script>${codes.javascript}</script>`;
        }
        if (codes.coffee) {
          if (codes.coffee !== this._codes_previous.coffee) {
            this._coffee_body = (function() {
              try {
                ({js, v3SourceMap} = CoffeeScript.compile(codes.coffee, {
                  sourceMap: true,
                  inline: true
                }));
                js = `${js}\n//# sourceMappingURL=data:application/json;base64,${btoa(unescape(encodeURIComponent(v3SourceMap)))}\n//# sourceURL=fiddle-content.coffee`;
                return `<script id="coffee-script">${js}</script>`;
              } catch (error1) {
                e = error1;
                if (e.location != null) {
                  show_error(`CoffeeScript Compilation Error on line ${e.location.first_line + 1}: ${e.message}`, e.location.first_line + 1, e.location.first_column);
                } else {
                  show_error(`CoffeeScript Compilation Error: ${e.message}`);
                }
                return "";
              }
            })();
          }
          body += this._coffee_body;
        }
        html = `<!doctype html>\n<html>\n	<head>\n		<meta charset="utf-8">\n		<meta name="viewport" content="width=device-width, initial-scale=1">\n		${head}\n	</head>\n	<body>\n		${body}\n	</body>\n</html>`;
        lines_before_coffee_script = null;
        coffee_script_index = html.indexOf("<script id=\"coffee-script\">");
        if (coffee_script_index >= 0) {
          before_coffee_script = html.slice(0, coffee_script_index);
          lines_before_coffee_script = before_coffee_script.split("\n").length - 1;
        }
        run = () => {
          var data_uri;
          localStorage[this.disable_output_key] = true;
          $pane.find(".disabled-output").remove();
          $iframe.show();
          $(window).on("beforeunload", () => {
            if (this.loaded) {
              delete localStorage[this.disable_output_key];
            }
          });
          $iframe.on("load", () => {
            $pane.loading("done");
            return this.loaded = true;
          });
          // if browser supports srcdoc
          if (typeof $iframe[0].srcdoc === "string") {
            $iframe.attr({
              srcdoc: html
            });
          } else {
            // NOTE: data URIs are limited to ~32k characters
            data_uri = `data:text/html,${encodeURI(html)}`;
            if (iframe.contentWindow) {
              iframe.contentWindow.location.replace(data_uri);
            } else {
              $iframe.attr({
                src: data_uri
              });
            }
          }
          return $.each(codes, (lang, code) => {
            return this._codes_previous[lang] = code;
          });
        };
        $pane.find(".disabled-output").remove();
        if (this.disable_output) {
          $pane.loading("done");
          $iframe.hide();
          $disabled_output = $("<div>").addClass("disabled-output").append($("<button>").click(run).append($('<svg height="48" viewBox="0 0 48 48" width="48" xmlns="http://www.w3.org/2000/svg">\n	<defs xmlns="http://www.w3.org/2000/svg">\n		<filter id="drop-shadow" height="130%">\n			<feOffset dx="0" dy="2" in="SourceAlpha"/>\n			<feMerge>\n				<feMergeNode/>\n				<feMergeNode in="SourceGraphic"/>\n			</feMerge>\n		</filter>\n		<filter id="recessed" height="130%">\n			<feOffset dx="0" dy="2" in="SourceGraphic"/>\n		</filter>\n	</defs>\n	<path d="M20 33l12-9-12-9v18zm4-29C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm0 36c-8.82 0-16-7.18-16-16S15.18 8 24 8s16 7.18 16 16-7.18 16-16 16z"/>\n</svg>')), $("<p>This might crash...</p>"));
          return $pane.append($disabled_output);
        } else {
          return run();
        }
      }));
    }

    destroy() {
      // If the output was not disabled (and implicitly, it hasn't crashed)
      // Or the output was disabled but the user clicked run and it loaded (without crashing)
      if ((!this.disable_output) || (this.disable_output && this.loaded)) {
        delete localStorage[this.disable_output_key];
      }
      return this.destroyed = true;
    }

  };

  this.EditorPane = (function() {
    class EditorPane extends LeafPane {
      constructor(options) {
        var $pad, $pane, editor, fb_fp, lang, project, session, trigger_code_change;
        super(options);
        EditorPane.instances.push(this);
        ({lang, project} = options);
        this.lang = lang;
        $pane = this.$;
        $pane.addClass("editor-pane");
        trigger_code_change = function() {
          project.codes[lang] = editor.getValue();
          return project.$codes.triggerHandler("change", lang);
        };
        $pad = $(E('div'));
        $pad.appendTo($pane);
        $pane.loading();
        
        // Firepad Firebase reference
        fb_fp = project.fb.child(lang);
        
        // Create ACE
        editor = this.editor = ace.edit($pad[0]);
        editor.on('change', trigger_code_change);
        session = editor.getSession();
        editor.setShowPrintMargin(false);
        editor.setReadOnly(true);
        editor.setSelectionStyle("text"); // because this is what your selection will look like to other people
        // TODO: toggle line highlight based on focusedness of the ace editor 
        editor.setOption("highlightActiveLine", false);
        editor.setOption("highlightGutterLine", false);
        editor.$blockScrolling = 2e308; // I don't know if I actually want this, just hiding a warning
        session.setUseWrapMode(false);
        session.setUseWorker(lang !== "html"); // html linter recommends full html (<!doctype> etc.) which we don't want
        session.setUseSoftTabs(false);
        session.setMode(`ace/mode/${lang}`);
        
        // Create Firepad
        this.firepad = Firepad.fromACE(fb_fp, editor);
        
        // Initialize contents
        this.firepad.on('ready', () => {
          trigger_code_change();
          $pane.loading("done");
          return editor.setReadOnly(false);
        });
      }

      layout() {
        return this.editor.resize();
      }

      destroy() {
        var instance;
        this.firepad.dispose();
        this.editor.destroy();
        return EditorPane.instances = (function() {
          var j, len, ref, results;
          ref = EditorPane.instances;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            instance = ref[j];
            if (instance !== this) {
              results.push(instance);
            }
          }
          return results;
        }).call(this);
      }

    };

    EditorPane.instances = [];

    return EditorPane;

  }).call(this);

}).call(this);
